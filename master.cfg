# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *
from buildbot.process.properties import Property

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("poppler-worker", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []

#Â REPO_URL = 'https://gitlab.freedesktop.org/poppler/poppler.git'
REPO_URL = 'https://github.com/neighbourhoodie/poppler.git'
REPO_BRANCH = 'nh/ci'

c['change_source'].append(changes.GitPoller(
    REPO_URL,
    branches=True,
    pollInterval=300
))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

c['schedulers'].append(schedulers.AnyBranchScheduler(
    name="all",
    builderNames=["poppler-builder"]
))

c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["poppler-builder"]
))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

refs_dir = '/buildbot/refs'
outputs_dir = '/buildbot/outputs'

repo_dir = '/buildbot/poppler-builder/build'
build_dir = os.path.join(repo_dir, 'build')
regtest_dir = os.path.join(repo_dir, 'regtest')

refs_lock = util.MasterLock(refs_dir)

poppler_build = util.BuildFactory()

poppler_build.addStep(steps.Git(
    repourl=Property('repository', REPO_URL),
    branch=REPO_BRANCH,
))

poppler_build.addStep(steps.ShellCommand(
    name='make build directory',
    command=['mkdir', '-p', 'build'],
    workdir=repo_dir,
))

poppler_build.addStep(steps.ShellSequence(
    name='compile',
    commands=[
        util.ShellArg(command=['cmake', '..', '-DENABLE_GPGME=OFF'], logname='cmake'),
        util.ShellArg(command=['make'], logname='make'),
    ],
    workdir=build_dir,
    haltOnFailure=True,
))

poppler_build.addStep(steps.ShellCommand(
    name='update reference sets',
    command=[
        '/buildbot/refs/update',
        '--refs-path', refs_dir,
        '--poppler-path', repo_dir,
        '--from-all'
    ],
    haltOnFailure=True,
))

OUTPUT_DIR_PATTERN = '/%(prop:buildername)s/build-%(prop:buildnumber)s/'

def get_output_dir(suite):
    return util.Interpolate(outputs_dir + OUTPUT_DIR_PATTERN + suite)

def get_report_url(suite):
    host = os.environ['BUILDBOT_WEB_URL'].strip('/')
    return util.Interpolate(host + '/outputs' + OUTPUT_DIR_PATTERN + suite + '/html/index.html')

suite_name = 'unittestcases'

poppler_build.addStep(steps.ShellCommand(
    name='run tests',
    command=[
        './poppler-regtest', 'run-tests',
        '--create-diffs',
        '--out-dir', get_output_dir(suite_name),
        '--refs-dir', os.path.join(refs_dir, suite_name, 'outputs'),
        os.path.join(refs_dir, suite_name, 'sources')
    ],
    workdir=regtest_dir,
    haltOnFailure=True,
))

poppler_build.addStep(steps.ShellCommand(
    name='create report',
    command=[
        './poppler-regtest', 'create-report',
        '--pretty-diff',
        '--no-browser',
        '--no-absolute-paths',
        '--out-dir', get_output_dir(suite_name),
        '--refs-dir', os.path.join(refs_dir, suite_name, 'outputs'),
        os.path.join(refs_dir, suite_name, 'sources')
    ],
    workdir=regtest_dir,
    alwaysRun=True,
    haltOnFailure=True,
))

poppler_build.addStep(steps.ShellCommand(
    name='report URL',
    command=['echo', 'View report at:', get_report_url(suite_name)],
    alwaysRun=True,
))

c['builders'].append(util.BuilderConfig(
    name='poppler-builder',
    workernames=['poppler-worker'],
    factory=poppler_build,
    locks=[refs_lock.access('exclusive')],
))

####### REPORTER TARGETS

# 'services' is a list of Reporter Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Poppler CI"
c['titleURL'] = "https://poppler.freedesktop.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://127.0.0.1:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(
    port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
    plugins=dict(waterfall_view={}, console_view={}),
    auth=util.RemoteUserAuth(headerRegex='(?P<username>[^ @]+)'),
    authz=util.Authz(
        allowRules=[
            util.AnyControlEndpointMatcher(role="admins"),
        ],
        roleMatchers=[
            util.RolesFromUsername(roles=['admins'], usernames=["admin"])
        ]
      )
    )

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

# Email

smtp_host = os.environ.get("BUILDBOT_EMAIL_HOST", "mailpit")
smtp_port = os.environ.get("BUILDBOT_EMAIL_PORT", 1025)
smtp_user = os.environ.get("BUILDBOT_EMAIL_USER", 'buildbot')
smtp_pass = os.environ.get("BUILDBOT_EMAIL_PASS", 'buildbot')
mailing_list_address = os.environ.get("BUILDBOT_MAILNG_LIST",
                                      'list@poppler.example.com')

generator = reporters.BuildStatusGenerator(
    mode=('failing',) # only send mails for build failures
)

mn = reporters.MailNotifier(fromaddr=mailing_list_address,
                    sendToInterestedUsers=True,
                    # always CC the ML
                    extraRecipients=[mailing_list_address],
                    generators=[generator],
                    relayhost=smtp_host,
                    smtpPort=int(smtp_port),
                    smtpUser=smtp_user,
                    smtpPassword=smtp_pass
                    )

c['services'].append(mn)